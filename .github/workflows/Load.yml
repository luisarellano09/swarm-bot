name: ESP32 OTA Build and Upload

on:
  push:
    paths:
      - 'software/**'

jobs:
  detect_changes:
    runs-on: [self-hosted]
    outputs:
      changed_esp32_manager: ${{ steps.set_outputs.outputs.changed_esp32_manager }}  
      changed_esp32_node01: ${{ steps.set_outputs.outputs.changed_esp32_node01 }}
      changed_esp32_node02: ${{ steps.set_outputs.outputs.changed_esp32_node02 }}

    steps:
      - uses: actions/checkout@v3

      - name: Detect changed projects
        id: set_outputs
        run: |
          git fetch origin ${{ github.event.before }} --depth=1 || true
          changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})

          echo "changed_esp32_manager=false" >> $GITHUB_OUTPUT
          echo "changed_esp32_node01=false" >> $GITHUB_OUTPUT
          echo "changed_esp32_node02=false" >> $GITHUB_OUTPUT

          if echo "$changed_files" | grep -q '^software/esp32_manager/'; then
            echo "changed_esp32_manager=true" >> $GITHUB_OUTPUT
          fi
          if echo "$changed_files" | grep -q '^software/esp32_node01/'; then
            echo "changed_esp32_node01=true" >> $GITHUB_OUTPUT
          fi
          if echo "$changed_files" | grep -q '^software/esp32_node02/'; then
            echo "changed_esp32_node02=true" >> $GITHUB_OUTPUT
          fi

  build_upload_es32_manager:
    needs: detect_changes
    if: needs.detect_changes.outputs.changed_esp32_manager == 'true'
    runs-on: [self-hosted]
    steps:
      - uses: actions/checkout@v3
      - name: Build & Upload esp32_manager
        run: docker compose -f software/_devices/pi/deploy/downloadESP32/docker_compose_esp32_manager.yml up --build --abort-on-container-exit

  build_upload_esp32_node01:
    needs: detect_changes
    if: needs.detect_changes.outputs.changed_esp32_node01 == 'true'
    runs-on: [self-hosted]
    steps:
      - uses: actions/checkout@v3
      - name: Build & Upload esp32_node01
        run: docker compose -f software/_devices/pi/deploy/downloadESP32/docker_compose_esp32_node01.yml up --build --abort-on-container-exit

  build_upload_esp32_node02:
    needs: detect_changes
    if: needs.detect_changes.outputs.changed_esp32_node02 == 'true'
    runs-on: [self-hosted]
    steps:
      - uses: actions/checkout@v3
      - name: Build & Upload esp32_node02
        run: docker compose -f software/_devices/pi/deploy/downloadESP32/docker-compose_esp32_node02.yml up --build --abort-on-container-exit
